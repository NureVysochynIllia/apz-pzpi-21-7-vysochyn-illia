1 ОПИС АРХІТЕКТУРИ ПРОГРАМИ

Архітектура програми представляє собою 3-шарову архітектуру: представлення, обробка даних та доступ до даних.
1.	представлення. В системі є сторінками WPF, які бачить кінцевий користувач. Дає змогу переглядати користувачу стан даних у системі, наприклад чи заброньовано сховище та яка ціна буде за оренду сховища у цей період;
2.	обробка даних. В системі представлено за допомогою сервісів обробки та C# файлів сторінок. Займаються обробкою даних, наприклад вираховування яка ціна буде за оренду сховища у цей період, та заповненням динамічних даних, як створення нових сховищ при додаванні та встановлення іншої мови інтерфейсу;
3.	доступ до даних. В системі представлено за допомогою сервісів зв’язку з сервером. Ці сервіси отримують та надають дані сервісу, наприклад відкриття сховища чи бронювання його.

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Програма для IoT девайсу передбачає використання девайсу тільки двома з трьох користувачів системи: адміністратором (Admin) та користувачем (User)
Взаємодію користувачів з системою представлено на діаграмі прецедентів (рис 2.1). За діаграмою було визначено необхідну функціональність програми та взаємодію ролей з нею.
Програма має таку функціональність для різних ролей:
1.	адміністратор. Його акаунт використовується для безпечних запитів на сервер, тому перед використанням терміналу він має авторизуватися в системі. Після цього вводиться відповідний id кластеру, який вже збережений в базі даних системи;
2.	користувач. Обирає зі таблиці номерів відповідне сховище, і після цього може переглянути його об’єм у різних одиницях та ціну оренди сховища за годину. Після обрання необхідної дати та часу початку та закінчення оренди, користувач може переглянути загальну вартість оренди та оплатити її. Буде створено чек, який, при вставленні у відповідний приймальний отвір, буде перевірено та відкрито сховище. Також програма передбачає зміну мови інтерфейсу.

3 ПОБУДОВА ДІАГРАМИ ДІЯЛЬНОСТІ

Для розробки подальших функцій програми було розроблено UML діаграму діяльності (рис 3.1). Користувач має один шлях, який для звичайного використання має пройти без розгалуження активності.

4 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ

Взаємодія компонентів програми представлено за допомогою UML діаграми взаємодії (рис 4.1). Взаємодія відбувається між користувачем, програмою та сервером. Сама діаграма складається з 2 основних сторінок програми для IoT девайсу.

5 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Для проектування внутрішньої взаємодії компонентів системи було розроблено діаграму компонентів (рис. 5.1). Система серверу складається з таких компонентів: Сервіси запитів (HttpServices), Сторінки програми (WPFPages), Сервіси обробки (Processing services), Сервіси сховищ (StorageServices). Зовнішніми компонентами є Сервер (Server), Сховище (Storage) та Користувач (User).

6 ВЗАЄМОДІЯ З ІНШИМИ КОМПОНЕНТАМИ СИСТЕМИ

Програма взаємодіє з іншими компонентами системи завдяки двом основним методам: HTTP запити та WebSocket. За допомогою HTTP запитів програма передає на сервер дані для авторизації девайсу, бронювання сховища, відкриття та закриття сховища, а також приймає інформацію щодо характеристик кластеру та його сховищ, доступність сховищ до бронювання та результат бронювання. За допомогою WebSocket з’єднання система отримує інформацію про відкриття чи закриття сховища віддалено (за допомогою мобільного додатку).
Отже, за допомогою цих технологій було встановлено з’єднання з сервером. Безпека запитів обумовлюється використанням JWT на основі акаунту адміністратора системи, що налаштовується при першому увімкненні системи

ВИСНОВКИ

У ході виконання лабораторної роботи були покращені навички з  проектування вбудованих систем для програмної системи, розробки діаграм, створенні інтерфейсів за допомогою XAML. Було розроблено діаграми прецедентів, діяльності, взаємодії та компонентів. В результаті дула розроблена програмна реалізація розумного пристрою програмної системи. При розробці продукту дотримувались вимоги до чистого коду та Code Convention мови програмування С#.
