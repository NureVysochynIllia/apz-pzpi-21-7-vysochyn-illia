1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Система в цілому представляє класичну клієнт-серверну архітектуру. Сервери є незалежними один від одного. Клієнти також функціонують паралельно і незалежно один від одного. Немає жорсткої прив'язки клієнтів до серверів. У програми є 3 різних сервери:
1.	основний сервер системи, який представляє собою приймач для запитів REST API, реалізує обробку даних та бізнес логіку, комунікує з ODM для зв’язку з сервером бази даних;
2.	сервер бази даних приймає дані від серверу системи та зберігає їх локально, забезпечуючи безпеку даних;
3.	сервер веб додатку, який формує сторінки для відправлення їх у браузер користувача.
Отже, можна сказати, що система використовує також трирівневу архітектурну модель програмного забезпечення, забезпечуючи незалежність кожного компонента, в результаті покращуючи можливість до горизонтального масштабування, швидкодії та доступності до системи в цілому.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Було розроблено діаграму системи у вигляді UML діаграми розгортання. Ця діаграма допомагає відслідкувати взаємодію в системі фізичних компонентів (вузли) та які програмні компоненти (артефакти) необхідно запускати на кожному з вузлів.
Система складається з 7 вузлів: сервер системи, сервер бази даних, сервер веб-додатку, комп’ютер клієнта, смартфон клієнта, кластер сховища(IoT пристрій) та сховище(механічний пристрій).
Сервер системи складається з кількох шарів, що забезпечують зв’язок клієнтів зі збереженими у базі даних значеннями та обробку бізнес логіки. Сервер бази даних забезпечує зв’язок з сервером системи за допомогою протоколу TCP/IP та отримує дані за допомогою ODM Mongoose. Сервер веб додатку надсилає сторінку для веб перегляду клієнту, яка ренедериться на його комп’ютері у браузері. Також дії у браузері надсилають запити на сервер за допомогою HTTPS. Також клієнт може взаємодіяти з системою за допомогою застосунку на смартфоні, та з нього будуть надсилатися запити HTTPS на сервер системи. IoT пристрій (кластер сховищ) надсилає запити HTTPS при фізичній оренді сховища. Також цей девайс підключений до сервера за допомогою WebSocket для отримання наказів на відкриття сховища при потребі клієнта. Кластер також підключається до свого сховища за допомогою дроту.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Архітектура серверної частини програмної системи представляє з себе звичайний проект на ExpressJS, тобто 3-рівневу архітектуру: маршрути, контролери/сервіси та Mongoose ODM. Сама система складається з 5 основних частин:
1.	маршрути (routers): використовуються для спрямування отриманого на сервер запиту у відповідний контролер. Також використовують, необхідне для продовження у контролері, проміжне програмне забезпечення;
2.	контролери (controllers): використовуються для обробки отриманого на сервер запиту. Також у цій програмній системі взаємодіють з моделями, для внесення змін в базу даних, та використовують сервіси для складнішої бізнес логіки. На вхід приймають параметри, рядок запиту чи тіло запиту;
3.	проміжне програмне забезпечення (middlewares): використовуються у проекті для перевірки на те, чи є користувач авторизованим, та чи надсилає він запит на відповідну до своєї ролі проміжну точку. Також використовуються для розшифровування імені користувача з JWT токену та передачі його далі, у контролер;
4.	моделі (models): використовується для ініціалізації бази даних та подільшої взаємодії з нею. За це все відповідає ODM Mongoose разом з базою даних Mongodb. До моделей можна звернутися у будь якій частині системи, що спрощує їх використання. Також моделі підтримують доволі складні сценарії використання, як створення об’єктів та валідація даних, наприклад в системі валідується правильне збереження часу роботи, як «([01]?[0-9]|2[0-3]):[0-5][0-9]» у самій моделі даних;
5.	сервіси (services): використовується для проведення складніших розрахунків, або винесення з контролерів функціоналу, який повторюється. В системі наявні сервіси для рахування відстані за координатами, за допомогою формули гаверсинуса. Також в сервісах є рахування різниці між датами у годинах та приведення об’ємів до різних одиниць виміру.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Програмна система для здачі в оренду сховищ має 3 ролі користувачів: Користувач (User), Обслуговуючий персонал (Staff) та Адміністратор системи (Administrator).
Взаємодію користувачів з системою представлено на діаграмі прецедентів (рис 4.1). За діаграмою було визначено необхідну функціональність системи та взаємодію ролей з нею.
Система має таку функціональність для користувачів:
1.	користувач. Може проводити реєстрацію та логін, переглядати наявні сховища у кластерах, знаходити найближчий кластер за допомогою мобільного додатку та бронювати сховища. Також є функціональність перегляду наявних бронювань, відкриття під час бронювання сховищ та поповнення балансу для оренди;
2.	обслуговуючий персонал. Може переглядати статистику за минулий місяць, змінювати цінову політику сховищ та налаштовувати кластери;
3.	адміністратор. Може проводити CRUD операції зі сховищами та кластерами, додавати ролі користувачам, створювати бекапи та завантажувати їх (імпорт/експорт бази даних).

5 ПОБУДОВА ER-ДІАГРАМИ

Проектування бази даних було проведено за допомогою створення ER-моделі даних (рис 5.1). Діаграма складається з 5 основних сутностей: Користувачі (Users), Бронювання (Bookings), Сховища (Stroages), Кластери сховищ (Clusters), Об’єми сховищ (Volumes).
База даних має такі зв’язки між сутностями:
1.	користувачі – бронювання (один до багатьох, один користувач може мати багато бронювань, але одне бронювання належить тільки одному користувачу);
2.	кластери – сховища (один до багатьох, один кластер може мати багато сховищ, але одне сховище може належати тільки одному кластеру);
3.	сховища – бронювання (один до багатьох, одне сховище може мати кілька бронювань в різний час, але бронювання містить тільки одне сховище);
4.	сховища – об’єми (один до багатьох, одне сховище може мати кілька об’ємів у різних одиницях виміру, але об’єм належить лише до одного сховища).
Програмна система як базу даних використовує MongoDb. Забезпечувати роботу з базою даних буде ODM Mongoose.

6 СПЕЦИФІКАЦІЯ REST

Програмна система використовує REST для спілкування клієнтів з сервером. API складається з 27 кінцевих точок у 6 маршрутах (Додаток А). Кінцеві точки обробляють передачу даних між сервером та клієнтом, направляючи дані які надходять на сервер у відповідні функції. На сервері програмної системи для цього використовується звичайна маршрутизація у ExpressJS зі створенням Route та передачею в них відповідних запитів. Запити з маршрутів передаються у контролери, де обробляються вхідні дані. Деякі кінцеві точки не містять жодної інформації на вхід, наприклад запит GET на “/clusters/”, де відправляються всі кластери. Деякі кінцеві точки на сервері містять параметри тіла, як запит POST на “/user/login/”, який приймає 2 строки: “username” та “password”. Також наявні такі, де використовуються параметри запиту, як “/rent/nearest/”, де ми передаємо у строчці довготу та широту: “/rent/nearest/?latitude=123&longitude=127”. Деякі кінцеві точки беруть ім’я користувача з токена авторизації, який присутній на всіх кінцевих точках, окрім логіну та реєстрації. Наприклад, для отримання інформації про акаунт користувача, запит GET на “/user/”, ми не передаємо в запит жодних даних, окрім JWT токену, а з нього вже отримуємо необхідне ім’я користувача.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Для проектування внутрішньої взаємодії компонентів системи було розроблено діаграму компонентів (рис. 7.1). Система серверу складається з таких компонентів: Моделі сутності (Models), Контролери (Controller), Сервіси (Services), Проміжне ПЗ (Middlewares),  Маршрутизатори (Routers), Сервер API (APIServer), WebSocket. Зовнішніми компонентами є База даних (Database), Клієнтський інтерфейс (Client) та Кластер сховищ (IoT Device).

ВИСНОВКИ

У ході виконання лабораторної роботи були покращені навички з проектування серверної частини програмної системи, розробки діаграм, проектуванні бази даних. Спочатку було розроблено опис архітектури системи та серверної частини. Потім було побудовано діаграму розгортання, діаграму прецедентів, ER-діаграму та діаграму компонентів. Була розроблена програмна реалізація серверної частини програмної системи. В результаті було написано специфікацію REST для взаємодії з сервером. При розробці продукту дотримувались вимоги до чистого коду та Code Convention мови програмування JavaScript.

ДОДАТОК А

Специфікація REST

Посилання на кінцеву точку	Метод HTTP	Необхідна роль	Опис роботи
Маршрут User (“/user/”)
/user/login/	POST	-	Вхід до системи з отриманням JWT token
/user/reg/	POST	-	Реєстрація користувача
/user/replenish/	PATCH	User	Поповнення балансу на суму
/user/	GET	User	Перегляд даних користувача та балансу
Маршрут Storage (“/storages/”)
/storages/	GET	Staff	Отримання усіх сховищ разом з об’ємом
/storages/	POST	Admin	Додавання сховища до кластеру
/storages/:id/	PATCH	Admin	Зміна даних сховища (без об’єму)
/storages/:id/	DELETE	Admin	Видалення сховища (разом з його об’ємом)
/storages/volume/	POST	Admin	Додавання додаткової міри виміру до об’єму сховища
/storages/volume/	PATCH	Admin	Зміна об’єму сховища (також відповідно змінює об’єми в інших одиницях виміру)
Маршрут Cluster (“/clusters/“)
/clusters/	GET	Staff	Отримання усіх кластерів (без сховищ)
/clusters/	ADD	Admin	Створення кластеру
/clusters/:id/	PATCH	Admin	Зміна даних кластеру
Посилання на кінцеву точку	Метод HTTP	Необхідна роль	Опис роботи
/clusters/:id/	DELETE	Admin	Видалення кластеру з каскадним видаленням сховищ та об’ємів
/clusters/:id/	GET	Staff	Отримання одного кластеру з сховищами
Маршрут Admin (“/admin/”)
/admin/role/	PATCH	Admin	Зміна ролі користувача системи
/admin/import/	GET	Admin	Імпорт бази даних системи з раніше експортованих даних
/admin/export/	GET	Admin	Експорт бази даних системи до json файлу
/admin/users/	GET	Admin	Отримання даних користувачів системи з ід для зміни ролі
Маршрут Rent (“/rent/”)
/rent/	GET	User	Отримання кластерів за фільтрами: дані кластера, дані сховища, чи доступно у цей час
/rent/nearest/	GET	User	Отримання найближчого кластера за координатами
/rent/new/	POST	User	Орендування сховища, тільки якщо достатньо грошей на балансі
/rent/active/	GET	User	Активні бронювання (які почались та ще не скінчились). Сховища з відповіді можна відкрити користувачу.
/rent/all/	GET	User	Отримання всієї історії оренди у системі у користувача
/rent/open/	PATCH	User	Відкриття орендованого сховища
Маршрут Staff (“/staff/”)
/staff/price/	POST	Staff	Зміна ціни за одне сховище чи для всіх сховищ кластеру
Посилання на кінцеву точку	Метод HTTP	Необхідна роль	Опис роботи
/staff/stat/	GET	Staff	Отримання інформації про доходність та кількість орендованих годин для всіх сховищ за 3 місяця

