1 ОПИС АРХІТЕКТУРИ ПРОГРАМИ

Архітектура програми представляє собою архітектурний патерн MVVM. Ця архітектура дає можливість легко прив’язувати дані та оновлювати їх у інтерфейсі за необхідності. Основні переваги MVVM:
Розробка користувацького інтерфейсу здійснюється дизайнером інтерфейсів за допомогою технології, більш-менш природної для такої роботи (XML).
Логіка користувацького інтерфейсу реалізується розробником як компонент ViewModel.
Функціональні зв'язки між користувацьким інтерфейсом та ViewModel реалізуються через біндинги (bindings), які, по суті, є правилами типу «якщо кнопка A була натиснута, повинен бути викликаний метод onButtonAClick() з ViewModel».
У моєму додатку це реалізується так:
1.	Model: Відповідає за бізнес-логіку і управління даними. Включає в себе репозиторії та джерела даних. Включає в себе сервіси та інтерфейси даних.
2.	View: Відповідає за відображення даних і взаємодію з користувачем. Включає в себе Activity та Fragment.
3.	ViewModel: Посередник між Model та View, що забезпечує підготовку та управління даними для відображення. Включає в себе Adapter.

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Програма для мобільного пристрою передбачає використання пристрою тільки одним з трьох користувачів системи: користувачем (User)
Взаємодію користувача з системою представлено на діаграмі прецедентів (рис 2.1). За діаграмою було визначено необхідну функціональність програми та взаємодію ролі з нею.
Програма має таку функціональність для ролі:
користувач. Може увійти в акаунт або зареєструватися, якщо ще немає. Після цього користувачу доступно перегляд кластерів та поповнення балансу. Також можна перейти на відповідну вкладку та за допомогою координат користувача отримати маршрут до найближчого кластера. Після обрання необхідного кластеру можна обрати зручне сховище та забронювати його. Під час того, як оренда активна користувач може легко відкрити та закрити сховище за допомогою відповідної кнопки у програмі. Після закінчення орендного періоду в програмі зберігається інформація про історію оренди. Також програма передбачає зміну мови інтерфейсу.

3 ПОБУДОВА ДІАГРАМИ ДІЯЛЬНОСТІ

Для розробки подальших функцій програми було розроблено UML діаграму діяльності (рис 3.1). Користувач має кілька шляхів, що відповідають за різні функції програми.

4 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ

Взаємодія компонентів програми представлено за допомогою UML діаграми взаємодії (рис 4.1). Взаємодія відбувається між користувачем, програмою та сервером. Сама діаграма складається з 2 основних сторінок програми для мобільного пристрою.

5 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Для проектування внутрішньої взаємодії компонентів системи було розроблено діаграму компонентів (рис. 5.1). Система серверу складається з таких компонентів: Макет сторінки (Layout), Контролери інтерфейсу (UI controllers), Сервіси (Services), Фрагмент для карти (MapFragment), Сервіси запитів (APIService) та Моделі запитів/відповідей (Models). Зовнішніми компонентами є Сервер (Server), Інтерфейс Google Карт (Google API) та Користувач (User).

6 ВЗАЄМОДІЯ З ІНШИМИ КОМПОНЕНТАМИ СИСТЕМИ

Програма взаємодіє з іншими компонентами системи завдяки HTTP запитам. За допомогою HTTP запитів програма передає на сервер дані для авторизації користувача, бронювання сховища, відкриття та закриття сховища, а також приймає інформацію щодо характеристик кластеру та його сховищ, доступність сховищ до бронювання та результат бронювання. Також за допомогою API Google maps будується маршрут до найближчого кластеру до користувача.
Отже, за допомогою цих технологій було встановлено з’єднання з сервером. Безпека запитів обумовлюється використанням JWT на основі акаунту користувача системи, а вхід в акаунт може бути проведений при першому запуску програми, а вихід з акаунту проводиться у меню додатку.

ВИСНОВКИ

У ході виконання лабораторної роботи були покращені навички з  проектування мобільного додатку для програмної системи, розробки діаграм, створенні інтерфейсів за допомогою XML. Було розроблено діаграми прецедентів, діяльності, взаємодії та компонентів. В результаті дула розроблена програмна реалізація розумного пристрою програмної системи. При розробці продукту дотримувались вимоги до чистого коду та Code Convention мови програмування Kotlin.
