1 ОПИС АРХІТЕКТУРИ ПРОГРАМИ

Архітектура веб частини системи представляє собою класичну архітектуру React проектів - компонентну архітектуру. Кожна сторінка представляє собою один компонент, перехід на який виконується за допомогою react-router-dom. Також окремі компоненти використовуються для речей, які мають кілька різних можливих значень, як заповнення списків кластерів.
Додаток побудований з використанням кількох ключових аспектів архітектури React, що включають:
Ізольованість компонентів: Кожен компонент відповідає за свій власний стан і рендеринг, що дозволяє ізолювати зміни та полегшує підтримку коду.
Модульність та повторне використання: Компоненти можуть бути легко перенесені і використані в інших частинах додатка, забезпечуючи модульність і повторне використання коду.
Прогнозованість: Дані передаються від батьківських компонентів до дочірніх через пропси, що робить потік даних передбачуваним і полегшує відлагодження.
Легкість розуміння: Простий односпрямований потік даних зменшує складність взаємодії між компонентами.
Вкладені та динамічні маршрути: Підтримуються як прості, так і складні маршрути, що включають вкладені маршрути та динамічні параметри.
Побічні ефекти та асинхронні операції
Обробка побічних ефектів: Використовуються хуки, такі як useEffect, для обробки побічних ефектів, таких як запити до API або інші асинхронні операції. Це дозволяє чітко розділяти рендеринг і логіку побічних ефектів.
Легкий життєвий цикл: Використання хуків дозволяє чітко контролювати, коли і як виконуються побічні ефекти, що підвищує керованість та стабільність додатка.

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Програмна система для здачі в оренду сховищ має 3 ролі користувачів: Користувач (User), Обслуговуючий персонал (Staff) та Адміністратор системи (Administrator).
Взаємодію користувачів з веб-застосунком представлено на діаграмі прецедентів (рис 2.1). За діаграмою було визначено необхідну функціональність системи та взаємодію ролей з нею.

Система має таку функціональність для користувачів:
1.	користувач. Може проводити реєстрацію та логін, переглядати кластери та наявні сховища у кластерах та бронювати їх. Також є функціональність перегляду наявних бронювання, історії бронювання та поповнення балансу для оренди;
2.	обслуговуючий персонал. Може переглядати статистику за минулий місяць, змінювати цінову політику сховищ та налаштовувати кластери;
3.	адміністратор. Може проводити CRUD операції зі сховищами та кластерами, змінювати ролі користувачам, створювати бекапи та завантажувати їх (імпорт/експорт бази даних).

3 ПОБУДОВА ДІАГРАМИ ДІЯЛЬНОСТІ

Для розробки подальших функцій програми було розроблено UML діаграму діяльності (рис 3.1). Користувач має кілька шляхів, що відповідають за різні функції програми.

4 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

У результаті аналізу структури моделі програмної системи було виділено пакети, які складають систему. Ці пакети та зв’язки між ними можна  побачити на діаграмі пакетів (рис. 4.1). На діаграмі присутня взаємодія як внутрішніх пакетів, так і взаємодія з сервером.

5 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Для розробки структури програми створено діаграму компонент(рис. 5.1). На ній відображено взаємодію основних компонентів веб програми: Сторінки (Page), Компоненти (Component), Інтерфейси (Interfaces), Запити (HttpRequest). Також система взаємодіє з зовнішніми компонентами: сервером та користувачами.

6 ВЗАЄМОДІЯ З ІНШИМИ КОМПОНЕНТАМИ СИСТЕМИ

Веб-клієнт взаємодіє з іншими компонентами системи завдяки HTTP запитам. За допомогою HTTP запитів веб-клієнт передає на сервер дані для авторизації користувача, бронювання сховища та поповнення балансу, а також приймає інформацію щодо характеристик кластеру та його сховищ, доступність сховищ до бронювання, результат бронювання та інформація про користувача.
Отже, за допомогою цих технологій було встановлено з’єднання з сервером. Безпека запитів обумовлюється використанням JWT на основі акаунту користувача системи, а вхід в акаунт може бути проведений у будь який момент та зберігається у локальному сховищі, а вихід з акаунту проводиться у шапці сайту.

ВИСНОВКИ

У ході виконання лабораторної роботи були покращені навички з проектування клієнтської частини програмної системи, розробки діаграм, проектуванні інтерфейсів за допомогою HTML, CSS та React. Була розроблена програмна реалізація клієнтської частини програмної системи. При розробці продукту дотримувались вимоги до чистого коду та Code Convention мови програмування TypeScript.
